{"version":3,"sources":["Components/User/User.js","Components/Userincomments/Userincomment.js","Components/Comment/Comment.js","Components/Commentlist/Commentlist.js","Components/Post/Post.js","Components/Postlist/Postlist.js","App.js","index.js"],"names":["User","_ref","user","name","username","email","address","react_default","a","createElement","className","city","Userincomment","Fragment","Comment","comment","body","Userincomments_Userincomment","Commentlist","comments","map","Components_Comment_Comment","key","id","Post","post","title","Components_User_User","Components_Commentlist_Commentlist","Postlist","posts","isLoaded","filterByTitle","filterByTitleReverse","type","onClick","Components_Post_Post","POSTS_API","USERS_API","COMENTS_API","App","state","listWithUsersCommentsPosts","filteredList","isLoading","hasError","getPosts","_this","setState","Promise","all","fetch","then","responses","respons","json","_ref2","Object","slicedToArray","postsDate","usersDate","commentsDate","_objectSpread","find","userId","filter","postId","catch","sort","b","reverse","_this$state","this","disabled","Components_Postlist_Postlist","reset","React","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f1758237.chunk.js","sourcesContent":["import React from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const {\n    name, username, email, address,\n  } = user;\n\n  return (\n    <div className=\"post__user\">\n      <p className=\"user__name\">\n        Name:\n        {name}\n      </p>\n      <p className=\"user__username\">\n        Userame:\n        {username}\n      </p>\n      <p className=\"user__email\">\n        Email:\n        {email}\n      </p>\n      <p className=\"user__city\">\n        City:\n        {address.city}\n      </p>\n    </div>\n  );\n}\n\nUser.propTypes = {\n  name: PropTypes.string,\n  username: PropTypes.string,\n  email: PropTypes.string,\n  address: PropTypes.object,\n}.isRequired;\n\nexport default User;\n","import React from 'react';\nimport './Userincomments.css';\nimport PropTypes from 'prop-types';\n\nfunction Userincomment({ user }) {\n  return (\n    <>\n      <p className=\"user__email\">\n      Email:\n        {user}\n      </p>\n    </>\n  );\n}\n\nUserincomment.propTypes = ({\n  user: PropTypes.string,\n}).isRequired;\n\nexport default Userincomment;\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\nimport Userincomment from '../Userincomments/Userincomment';\n\nfunction Comment({ comment }) {\n  const { body } = comment;\n\n  return (\n    <div className=\"comment-item\">\n      <li className=\"comment-text\">{body}</li>\n      <Userincomment user={comment.email} />\n    </div>\n  );\n}\n\nComment.propTypes = PropTypes.shape({\n  body: PropTypes.string,\n  email: PropTypes.string,\n}).isRequired;\n\nexport default Comment;\n","import React from 'react';\nimport './Commentlist.css';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\n\nfunction Commentlist({ comments }) {\n  return (\n    <ul className=\"comments-list\">\n      {comments.map(comment => <Comment comment={comment} key={comment.id} />)}\n    </ul>\n  );\n}\n\nCommentlist.propTypes = {\n  comments: PropTypes.arrayOf(\n    PropTypes.shape({\n      postId: PropTypes.number,\n      id: PropTypes.number,\n      name: PropTypes.string,\n      email: PropTypes.string,\n      body: PropTypes.string,\n    }).isRequired,\n  ).isRequired,\n};\n\nexport default Commentlist;\n","import React from 'react';\nimport './Post.css';\nimport PropTypes from 'prop-types';\n\nimport User from '../User/User';\nimport Commentlist from '../Commentlist/Commentlist';\n\nfunction Post({ post }) {\n  const { user, comments } = post;\n\n  return (\n    <div className=\"post\">\n      <h2 className=\"post__title\">{post.title}</h2>\n      <p className=\"post__body\">{post.body}</p>\n      <User user={user} />\n      <Commentlist comments={comments} />\n    </div>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    user: PropTypes.shape(\n      PropTypes.shape({\n        id: PropTypes.number,\n        name: PropTypes.string,\n        email: PropTypes.string,\n        adress: PropTypes.shape({\n          street: PropTypes.string,\n          suite: PropTypes.string,\n          city: PropTypes.string,\n        }).isRequired,\n      }).isRequired,\n    ).isRequired,\n    comments: PropTypes.arrayOf(\n      PropTypes.shape(\n        PropTypes.shape({\n          body: PropTypes.string,\n          email: PropTypes.string,\n          name: PropTypes.string,\n        }).isRequired,\n      ).isRequired,\n    ).isRequired,\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport './Postlist.css';\nimport PropTypes from 'prop-types';\n\nimport Post from '../Post/Post';\n\nfunction Postlist({\n  posts,\n  isLoaded,\n  filterByTitle,\n  filterByTitleReverse,\n}) {\n  return (\n    <div className=\"post-list\">\n      {isLoaded && (\n        <>\n          <button\n            type=\"button\"\n            onClick={() => filterByTitle(posts)}\n          >\n          Sort A-Z\n          </button>\n          <button\n            type=\"button\"\n            onClick={() => filterByTitleReverse(posts)}\n          >\n          Sort Z-A\n          </button>\n        </>\n      )}\n      {posts.map(post => <Post post={post} key={post.id} />)}\n    </div>\n  );\n}\n\nPostlist.propTypes = {\n  isLoaded: PropTypes.bool,\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      userId: PropTypes.number,\n      id: PropTypes.number,\n      title: PropTypes.string,\n      body: PropTypes.string,\n    })\n  ),\n}.isRequired;\n\nexport default Postlist;\n","import React from 'react';\nimport './App.css';\nimport Postlist from './Components/Postlist/Postlist';\n\n// const ConsolidatedList = (postApi, commentsApi, usersApi) => postApi.map(\n//   post => ({\n//     ...post,\n//     user: usersApi.find(user => user.id === post.userId),\n//     comments: commentsApi.filter(comment => comment.postId === post.id),\n//   })\n// );\n\n// const listWithUsersCommentsPosts = ConsolidatedList(posts, comments, users);\n\nconst POSTS_API = 'https://jsonplaceholder.typicode.com/posts';\nconst USERS_API = 'https://jsonplaceholder.typicode.com/users';\nconst COMENTS_API = 'https://jsonplaceholder.typicode.com/comments';\n\nclass App extends React.Component {\n  state = {\n    listWithUsersCommentsPosts: [],\n    filteredList: [],\n    isLoading: false,\n    isLoaded: false,\n    hasError: false,\n  };\n\n  getPosts = () => {\n    this.setState({\n      isLoading: true,\n    });\n\n    Promise.all([fetch(POSTS_API), fetch(USERS_API), fetch(COMENTS_API)])\n      .then(responses => Promise.all(responses.map(respons => respons.json())))\n      .then(([postsDate, usersDate, commentsDate]) => this.setState({\n        listWithUsersCommentsPosts: postsDate.map(\n          post => ({\n            ...post,\n            user: usersDate.find(user => user.id === post.userId),\n            comments: commentsDate.filter(\n              comment => comment.postId === post.id\n            ),\n          })\n        ),\n        isLoading: false,\n        isLoaded: true,\n        hasError: false,\n      }))\n      .catch(() => this.setState({\n        hasError: true,\n        isLoading: false,\n      }));\n  }\n\n  filterByTitle = posts => (\n    this.setState({\n      filteredList: posts.sort((a, b) => (a.title > b.title ? 1 : -1)),\n    })\n  )\n\n  filterByTitleReverse = posts => (\n    this.setState({\n      filteredList: posts.sort(\n        (a, b) => (a.title > b.title ? 1 : -1)\n      ).reverse(),\n    })\n  )\n\n  render() {\n    const {\n      listWithUsersCommentsPosts,\n      isLoading, isLoaded,\n      filteredList,\n      hasError,\n    } = this.state;\n\n    if (hasError) {\n      return (\n        <>\n          <p>Some problems...</p>\n          <button\n            type=\"button\"\n            onClick={this.getPosts}\n            disabled={isLoading}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Reload'}\n          </button>\n        </>\n      );\n    }\n\n    return (\n      <div className=\"App\">\n        <h1>List of Posts</h1>\n        {!isLoaded && (\n          <button\n            type=\"button\"\n            onClick={this.getPosts}\n            disabled={isLoading}\n          >\n            {isLoading\n              ? 'Loading...'\n              : 'Load'}\n          </button>\n        )}\n        <Postlist\n          posts={listWithUsersCommentsPosts}\n          isLoaded={isLoaded}\n          filteredList={filteredList}\n          filterByTitle={this.filterByTitle}\n          filterByTitleReverse={this.filterByTitleReverse}\n          reset={this.reset}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}